"""–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏"""

from typing import Dict, Tuple
from requests import get
from telebot import TeleBot, types
from config import BOT_TOKEN
import errors

class TgBot():
    """–≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram Bot, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –æ–±—â–∞—Ç—å—Å—è
    —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Telegram —á–µ—Ä–µ–∑ Telegram API"""
    bot: TeleBot
    chat_handler: dict
    chat_states = {'started':0, 'entered':1}

    def __init__(self) -> None:
        self.bot = TeleBot(BOT_TOKEN)
        self.bot.message_handler(commands=['start'])(self.start)
        self.bot.message_handler(commands=['help'])(self.help)
        self.bot.message_handler(commands=['values'])(self.values)
        self.bot.message_handler(content_types=['text'])(self.func)
        self.bot.remove_webhook()

        self.chat_handler = dict()


    @staticmethod
    def create_keyboard(*args: str) -> types.ReplyKeyboardMarkup:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = []
        for button in args:
            buttons.append(types.KeyboardButton(button))

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ä–∞–∑–º–µ—Ç–∫—É
        markup.add(*buttons)

        return markup


    def start(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""

        markup = TgBot().create_keyboard('üëã –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ
        self.bot.send_message(message.chat.id, \
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –≠—Ç–æ –±–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=markup)

        self.chat_handler[message.chat.id] = self.chat_states['started']


    def help(self, message: types.Message) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ help"""

        help_message = """I am a simple Telegram
            bot that can respond to the /start and /help commands."""

        self.bot.send_message(message.chat.id, help_message)


    def values(self, message: types.Message) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ values"""

        values_message = ""

        nom_dict = TgBot.set_dict()
        
        for nom in nom_dict:
            values_message += f'\n- {nom} - {nom_dict[nom][0]}'

        self.bot.send_message(message.chat.id, values_message)


    def func(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        chat_id = message.chat.id

        if(message.text == "üëã –ù–∞—á–∞—Ç—å"):
            markup = TgBot().create_keyboard('‚ùì –ü–æ–º–æ—â—å')

            self.bot.send_message(chat_id, text="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π '–ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", reply_markup=markup)

            self.chat_handler[chat_id] = self.chat_states['entered']


        elif(message.text == "‚ùì –ü–æ–º–æ—â—å"):
            markup = TgBot().create_keyboard('‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?', 
                                             '–í–∞–ª—é—Ç—ã',
                                             '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

            self.bot.send_message(chat_id, text="–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup)
        
        
        elif(message.text == '–í–∞–ª—é—Ç—ã'):
            self.values(message)


        elif(message.text == "‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?"):
            self.bot.send_message(chat_id, "–ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã.\n"
                                            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –≤–≤–æ–¥—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
                                            "–∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤–∞–ª—é—Ç—ã, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å,\n"
                                            "–∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤–∞–ª—é—Ç—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã,\n"
                                            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã")


        elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
            if self.chat_states['started'] == self.chat_handler[chat_id]:
                markup = TgBot().create_keyboard('üëã –ù–∞—á–∞—Ç—å', '‚ùì –ü–æ–º–æ—â—å')

            elif self.chat_states['entered'] == self.chat_handler[chat_id]:
                markup = TgBot().create_keyboard('‚ùì –ü–æ–º–æ—â—å')

            self.bot.send_message(chat_id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)


        else:
            if self.chat_states['started'] == self.chat_handler[chat_id]:
                self.bot.send_message(chat_id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω..")

            elif self.chat_states['entered'] == self.chat_handler[chat_id]:
                text = message.text
                try:
                    base, quote, amount = TgBot().get_base_quote_amount(chat_id, text)

                    if None in (base, quote, amount):
                        return

                    if base not in TgBot().set_dict():
                        raise errors.CurrencyNotFoundException(base, quote, currency=base)
                    elif quote not in TgBot().set_dict():
                        raise errors.CurrencyNotFoundException(base, quote, currency=quote)

                except errors.CurrencyNotFoundException as e:
                    self.bot.send_message(chat_id, f'Currency {e.currency} is not found.')
                    return

                try:
                    base, quote, amount = TgBot().get_base_quote_amount(chat_id, text)
                except e:
                    return

                resp_msg = TgBot().get_price(base, quote, amount)

                self.bot.send_message(chat_id, resp_msg)


    @staticmethod
    def set_dict() -> Dict[str, Tuple[str, float]]:
        """
        –û–ø–∏—Å–∞–Ω–∏–µ:
        ------------
            –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–¥ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞–ª—é—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å API –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        ------------
            `Dict[str, Tuple[str, float]]` : –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã –≤
            –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –∏ –∫–æ—Ä—Ç–µ–∂ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è.
        """
        nom_dict = dict()

        response = get('https://www.cbr-xml-daily.ru/daily_json.js', timeout=10)

        if response.status_code != 200:
            raise errors.CBRException(f'Bad status code {response.status_code}')

        body = dict(response.json()['Valute'])

        for i in body:
            nom_dict[body[i]['CharCode']] = \
                tuple([body[i]['Name'], body[i]['Value'] / body[i]['Nominal']])

        nom_dict['RUB'] = tuple(['–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', 0])

        return nom_dict


    @staticmethod
    def get_price(base: str, quote: str, amount: float) -> str:
        """
        –û–ø–∏—Å–∞–Ω–∏–µ:
        ------------
            –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –±–∞–∑–æ–≤–æ–π –∏ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π
            –≤–∞–ª—é—Ç–∞–º–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é. –ï—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –∏–ª–∏ –∫–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞ - RUB (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π
            —Ä—É–±–ª—å), —Ç–æ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–æ —Å–ª–æ–≤–æ "–†—É–±–ª–µ–π".

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        ------------
            `base` : `str`, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
            `quote` : `str`, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –≤–∞–ª—é—Ç—É –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
            `amount` : `float`, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Å—É–º–º—É –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        ------------
            –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ
            "—Å—É–º–º–∞_–±–∞–∑–æ–≤–∞—è_–≤–∞–ª—é—Ç–∞ = –∑–Ω–∞—á–µ–Ω–∏–µ_–∫–æ—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π_–≤–∞–ª—é—Ç—ã".
        """
        nom_dict = TgBot().set_dict()

        if quote == 'RUB':
            value = round(amount * nom_dict[base][1], 2)

            return str(amount) + " " + str(nom_dict[base][0]) + " = " + str(value) + " " + "–†—É–±–ª–µ–π"

        elif base == 'RUB':
            value = round(amount * 1 / nom_dict[quote][1], 2)

            return str(amount) + " " + '–†—É–±–ª–µ–π' + " = " + str(value) + " " \
                + str(nom_dict[quote][0])

        else:
            value = round(amount * nom_dict[base][1] / nom_dict[quote][1], 2)

            return str(amount) + " " + str(nom_dict[base][0]) + " = " + str(value) \
                + " " + str(nom_dict[quote][0])


    def get_base_quote_amount(self, chat_id: int, message: str) -> Tuple[str, str, float]:
        """
        –û–ø–∏—Å–∞–Ω–∏–µ:
        ------------
            –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–Ω–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç
            —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ–≥–æ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É, –≤–∞–ª—é—Ç—É –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Å—É–º–º—É.

            –ï—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É, –≤–∞–ª—é—Ç—É –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Å—É–º–º—É
            –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞.

            –ï—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ–Ω –ø–æ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ chat_id –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None
            –¥–ª—è –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã, –≤–∞–ª—é—Ç—ã –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Å—É–º–º—ã.
        """
        my_list = message.upper().split()

        try:
            base = my_list[0].strip()
            quote = my_list[1].strip()

            try:
                amount = float(my_list[2].strip())
                return base, quote, amount

            except ValueError:
                self.bot.send_message(chat_id, 'Amount have wrong format')
                return base, quote, None

        except IndexError:
            self.bot.send_message(chat_id, 'Wrong format of message')
            return None, None, None
